Q.1 Write a program that demonstrates the use of nice() system call. After a child process is started using fork(), assign higher priority to the child using nice() system call.
==>#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/time.h>

int main() {
    pid_t child_pid;
    int nice_value = 10; // Set a positive nice value for the child process

    // Fork a child process
    child_pid = fork();

    if (child_pid == -1) {
        perror("Fork failed");
        exit(1);
    } else if (child_pid == 0) {
        // This is the child process
        printf("Child process with PID %d\n", getpid());

        // Use nice() to increase the priority of the child process
        if (nice(nice_value) == -1) {
            perror("Nice failed");
            exit(1);
        }

        // Print the updated nice value of the child process
        int updated_nice = nice(0);
        printf("Child's nice value after adjustment: %d\n", updated_nice);
    } else {
        // This is the parent process
        printf("Parent process with PID %d\n", getpid());

        // Wait for the child process to finish
        wait(NULL);

        printf("Parent process exiting\n");
    }

    return 0;
}
##############################################################################################################################
Q.1 Create a child process using fork(), display parent and child process id. Child process will display the message “Hello World” and the parent process should display “Hi”.
===>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid;

    printf("Before fork()\n");

    pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("Child Process ID: %d\n", getpid());
        printf("Hello World\n");
    } else {
        // Parent process
        printf("Parent Process ID: %d\n", getpid());
        printf("Hi\n");
    }

    printf("After fork()\n");

    return 0;
}


###############################################################################################################################
Q. 1 Creating a child process using the command exec(). Note down process ids of the parent and the child processes, check whether the control is given back to the parent after the child process terminates. 
==>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid; // Process ID variable

    pid = fork(); // Create a child process

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("Child Process ID: %d\n", getpid());

        // Use exec to run a new process
        execlp("echo", "echo", "Hello from the child process", NULL);

        // If exec fails
        perror("exec");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        printf("Parent Process ID: %d\n", getpid());

        // Wait for the child process to terminate
        int status;
        waitpid(pid, &status, 0);

        if (WIFEXITED(status)) {
            printf("Child process terminated with exit status: %d\n", WEXITSTATUS(status));
        } else {
            printf("Child process terminated abnormally\n");
        }

        printf("Control is back to the parent process\n");
    }

    return 0;
}
  

###############################################################################################################################
Q.1 Write a program to illustrate the concept of orphan process ( Using fork() and sleep()) [10 marks]    
==>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid = fork(); // Create a child process

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("Child Process ID: %d\n", getpid());
        printf("Parent Process ID before sleep: %d\n", getppid());

        // Sleep for a while to simulate some processing in the child
        sleep(5);

        printf("Parent Process ID after sleep: %d\n", getppid());
    } else {
        // Parent process
        printf("Parent Process ID: %d\n", getpid());

        // Sleep for a while to allow child to start
        sleep(2);

        printf("Parent process is terminating\n");
        // The child becomes an orphan at this point as the parent terminates
    }

    return 0;
}


###############################################################################################################################
Q.1 Write a program to find the execution time taken for execution of a given set of instructions
(use clock() function)       
==>
#include <stdio.h>
#include <time.h>

int main() {
    clock_t start, end;
    double cpu_time_used;

    // Record the start time
    start = clock();

    // Your set of instructions go here
    for (long int i = 0; i < 1000000000000000; ++i) {
        // Some time-consuming operation
    }

    // Record the end time
    end = clock();

    // Calculate the CPU time used
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("CPU Time Used: %f seconds\n", cpu_time_used);

    return 0;
}
                                                                                          
              
###############################################################################################################################
Q.1 Write a program to create a child process using fork().The parent should goto sleep state and child process should begin its execution. In the child process, use execl() to execute the “ls” command.                                                                                                                        [10 marks]
==>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid = fork(); // Create a child process

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("Child Process ID: %d\n", getpid());

        // Use execl() to execute the "ls" command
        execl("/bin/ls", "ls", (char *)NULL);

        // If execl fails
        perror("execl");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        printf("Parent Process ID: %d\n", getpid());

        // Parent goes to sleep for a while
        sleep(5);

        printf("Parent process woke up\n");
    }

    return 0;
}


                                            ###############################################################################################################################
                                            ###############################################################################################################################
Q.1 Write the program to calculate minimum number of resources needed to avoid deadlock.                                                                                                             [10 marks]
#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int available[MAX_RESOURCES] = {3, 3, 2};
int maximum[MAX_PROCESSES][MAX_RESOURCES] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}};
int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}};
int need[MAX_PROCESSES][MAX_RESOURCES];

void calculateNeedMatrix() {
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            need[i][j] = maximum[i][j] - allocation[i][j];
        }
    }
}

int isSafe(int process, int request[]) {
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        if (request[i] > need[process][i] || request[i] > available[i])
            return 0;
    }
    return 1;
}

void simulateResourceAllocation(int process, int request[]) {
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }
}

int main() {
    // Calculate the need matrix
    calculateNeedMatrix();

    // Display the matrices
    printf("Available resources:\n");
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        printf("%d ", available[i]);
    }
    printf("\n\n");

    printf("Maximum matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("%d ", maximum[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("Allocation matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("%d ", allocation[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("Need matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    // Simulate resource request
    int process = 1; // Choose a process (0 to 4)
    int request[MAX_RESOURCES] = {1, 0, 2}; // Specify the resource request vector

    if (isSafe(process, request)) {
        printf("Resource request is safe. Simulating resource allocation...\n");
        simulateResourceAllocation(process, request);
        calculateNeedMatrix();
    } else {
        printf("Resource request is unsafe. Not allocating resources.\n");
    }

    // Display the minimum number of resources needed to avoid deadlock
    printf("Minimum number of resources needed to avoid deadlock:\n");
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        int sum = 0;
        for (int j = 0; j < MAX_PROCESSES; ++j) {
            sum += need[j][i];
        }
        printf("%d ", sum);
    }
    printf("\n");

    return 0;
}


###############################################################################################################################
Q. 1  Write a C program to accept the number of process and resources and find the need matrix content  and display it.                                                                                        [10 marks]
#include <stdio.h>

void calculateNeedMatrix(int processes, int resources, int max[processes][resources], int allocation[processes][resources], int need[processes][resources]) {
    // Calculate the need matrix
    for (int i = 0; i < processes; ++i) {
        for (int j = 0; j < resources; ++j) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

void displayMatrix(int processes, int resources, int matrix[processes][resources], const char* matrixName) {
    printf("%s:\n", matrixName);
    for (int i = 0; i < processes; ++i) {
        for (int j = 0; j < resources; ++j) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    int processes, resources;

    // Accept the number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &processes);
    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    // Declare matrices for max, allocation, and need
    int max[processes][resources];
    int allocation[processes][resources];
    int need[processes][resources];

    // Accept the max matrix
    printf("Enter the Max matrix:\n");
    for (int i = 0; i < processes; ++i) {
        for (int j = 0; j < resources; ++j) {
            scanf("%d", &max[i][j]);
        }
    }

    // Accept the allocation matrix
    printf("Enter the Allocation matrix:\n");
    for (int i = 0; i < processes; ++i) {
        for (int j = 0; j < resources; ++j) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Calculate the need matrix
    calculateNeedMatrix(processes, resources, max, allocation, need);

    // Display the matrices
    displayMatrix(processes, resources, max, "Max Matrix");
    displayMatrix(processes, resources, allocation, "Allocation Matrix");
    displayMatrix(processes, resources, need, "Need Matrix");

    return 0;
}
3 4
7 5 3 1
3 2 2 2
9 0 2 2

0 1 0 0
2 0 0 1
3 0 2 2

###############################################################################################################################